require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");

const express = require("express");
const app = express();
app.use(express.json());
app.use((req, res, next) => {
  res.header("Access-Control-Allow-Origin", "*");
  res.header(
    "Access-Control-Allow-Headers",
    "Origin, X-Requested-With, Content-Type, Accept"
  );
  next();
});

const bot = new Telegraf(process.env.BOT_TOKEN);
bot.launch();

app.post("/api/sendMessage", async (req, res) => {
  try {
    const message = `
    üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—ã–ª–∫–∏
    üì± –ì—Ä—É–∑: ${req.body.data.type}
    ‚öñÔ∏è –í–µ—Å: ${req.body.data.weight}
    üí∞ –¶–µ–Ω–∞ –∑–∞ –∫–≥: ${req.body.data.price}
    üìç –û—Ç–∫—É–¥–∞: ${req.body.data.from}
    üìç –ö—É–¥–∞: ${req.body.data.to}
    ${req.body.data.comment ? `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${req.body.data.comment}` : ""}
        `;

    let message_data;
    if (req.body.data.form === "cargo") {
      message_data = await bot.telegram.sendMessage(
        "@cargo_life", // ID –∫–∞–Ω–∞–ª–∞
        message,
        Markup.inlineKeyboard([
          Markup.button.url(
            "–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É",
            `https://t.me/${req.body.user.username}`
          ),
        ])
      );
    } else if (req.body.data.form === "exchange") {
    //   message_data = await bot.telegram.sendMessage(
    //     "", // ID –∫–∞–Ω–∞–ª–∞
    //     message
    //     // Markup.inlineKeyboard([
    //     //   Markup.button.callback("üóë –£–¥–∞–ª–∏—Ç—å", `delete_${savedCargo._id}`),
    //     // ])
    //   );
    }
    if (message_data) {
      await bot.telegram.sendMessage(
        req.body.user.chatId, // ID –∫–∞–Ω–∞–ª–∞
        message,
        Markup.inlineKeyboard([
          Markup.button.callback(
            "üõë –°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            `delete_${req.body.data.form}_${message_data.message_id}`
          ),
        ])
      );
    }

    res.send(message);
  } catch (error) {
    res.status(400).json({
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏",
      error: err.message,
    });
  }
});

bot.start(async (ctx) => {
  try {
    const startParams = ctx.message.text.split(" ")[1];

    if (startParams === "cargo") {
      const message_data = await ctx.reply(
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ WebApp, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "Cargo",
                  url: process.env.WEB_APP_CARGO, // –£–∫–∞–∂–∏—Ç–µ URL –≤–∞—à–µ–≥–æ WebApp
                },
              ],
            ],
          },
        }
      );
      if (message_data) {
        await ctx.pinChatMessage(message_data.message_id);
      }
    } else {
      await ctx.reply("holo");
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", err);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.");
  }
});

bot.action(/delete_(.+)/, async (ctx) => {
  try {
    const callbackData = ctx.match[1]; // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥—Ä—É–ø–ø—ã (.+)
    const message = ctx.callbackQuery.message; // –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å callback
    const [formType, messageId] = callbackData.split("_");

    if (formType === "cargo") {
      await bot.telegram.editMessageText(
        "@cargo_life", // –õ–∏–±–æ ID –∫–∞–Ω–∞–ª–∞
        messageId, // ID —Å–æ–æ–±—â–µ–Ω–∏—è
        undefined, // inlineMessageId, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        `<s>${message.text}</s>\n\n<b>‚≠ïÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>`,
        {
          parse_mode: "HTML",
        } // –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      );

      await ctx.editMessageText(
        `<s>${message.text}</s>\n\n<b>‚≠ïÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>`,
        {
          parse_mode: "HTML",
        }
      );
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", err);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.");
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`listening on port ${PORT}`);
});
