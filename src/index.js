require("dotenv").config();
const {
	Telegraf,
	Markup
} = require("telegraf");

const express = require("express");
const app = express();
app.use(express.json());
app.use((req, res, next) => {
	res.header("Access-Control-Allow-Origin", "*");
	res.header(
		"Access-Control-Allow-Headers",
		"Origin, X-Requested-With, Content-Type, Accept"
	);
	next();
});

const bot = new Telegraf(process.env.BOT_TOKEN);

const path_url = process.env.SECRET
if (process.env.WEBHOOK === "") {
	bot.launch();
} else {
	const webhookUrl = `${process.env.WEBHOOK}/${path_url}`
	bot.telegram.setWebhook(webhookUrl);

	app.post(`/${path_url}`, (req, res) => {
		bot.handleUpdate(req.body, res);
	});
}

bot.start(async (ctx) => {
	try {
		const message_data = await ctx.reply(
			"–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ WebApp, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", {
				reply_markup: {
					inline_keyboard: [
						[{
							text: "Cargo",
							url: process.env.WEB_APP_CARGO, // –£–∫–∞–∂–∏—Ç–µ URL –≤–∞—à–µ–≥–æ WebApp
						}, ],
					],
				},
				disable_web_page_preview: true, // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏
			}
		);

	} catch (err) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", err);
		await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ." + err);
	}
});

bot.action(/delete_(.+)/, async (ctx) => {
	try {
		const callbackData = ctx.match[1]; // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥—Ä—É–ø–ø—ã (.+)
		const message = ctx.callbackQuery.message; // –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å callback
		const [formType, messageId] = callbackData.split("_");

		if (formType === "cargo") {
			await bot.telegram.editMessageText(
				"@cargo_life", // –õ–∏–±–æ ID –∫–∞–Ω–∞–ª–∞
				messageId, // ID —Å–æ–æ–±—â–µ–Ω–∏—è
				undefined, // inlineMessageId, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
				`<s>${message.text}</s>\n\n<b>‚≠ïÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>`, {
					parse_mode: "HTML", // –£–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
					disable_web_page_preview: true, // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏
				}
			);


			await ctx.editMessageText(
				`<s>${message.text}</s>\n\n<b>‚≠ïÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>`, {
					parse_mode: "HTML",
					disable_web_page_preview: true, // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏
				}
			);
		}
	} catch (err) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", err);
		await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.");
	}
});

app.post("/api/sendMessage", async (req, res) => {
	try {
		let message, channel, message_data;
		
		if (req.body.data.form === "cargo") {
			message = `
	  üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—ã–ª–∫–∏
	  üì± –ì—Ä—É–∑: ${req.body.data.type}
	  ‚öñÔ∏è –í–µ—Å: ${req.body.data.weight}
	  üí∞ –¶–µ–Ω–∞ –∑–∞ –∫–≥: ${req.body.data.price}
	  üìç –û—Ç–∫—É–¥–∞: ${req.body.data.from}
	  üìç –ö—É–¥–∞: ${req.body.data.to}
	  ${req.body.data.comment ? `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${req.body.data.comment}` : ""}
		  `;
		  
			channel = 'cargo_life'
			message_data = await bot.telegram.sendMessage(
				`@${channel}`, // ID –∫–∞–Ω–∞–ª–∞
				message, {
					...Markup.inlineKeyboard([
						Markup.button.url(
							"–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É",
							`https://t.me/${req.body.user.username}`
						),
					]),
					disable_web_page_preview: true, // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏
				}
			);
		} else if (req.body.data.form === "exchange_saudi") {
			channel = 'exchange_saudi'
			//   message_data = await bot.telegram.sendMessage(
			//     "", // ID –∫–∞–Ω–∞–ª–∞
			//     message
			//     // Markup.inlineKeyboard([
			//     //   Markup.button.callback("üóë –£–¥–∞–ª–∏—Ç—å", `delete_${savedCargo._id}`),
			//     // ])
			//   );
		}
		if (message_data && channel) {
			await bot.telegram.sendMessage(
				req.body.user.chatId, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				message, {
					...Markup.inlineKeyboard([
						Markup.button.callback(
							"üõë –°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
							`delete_${req.body.data.form}_${message_data.message_id}`
						),
						Markup.button.url(
							"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
							`https://t.me/${channel}/${message_data.message_id}`
						),
					]),
					disable_web_page_preview: true, // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏
				}
			);
		}

		res.send(message);
	} catch (error) {
		res.status(400).json({
			message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏",
			error: err.message,
		});
	}
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
	console.log(`listening on port ${PORT}`);
});